
;; ---------------------------------------------------------------------------------------------------------------------

[int, tuple, cell, tuple, int] test_getPublicKey_data() method_id(0) {
    int function_selector = 88250;

    tuple stack = unsafe_tuple([]);
    cell data = begin_cell()
            .store_uint(123, 256)
            .store_uint(777, 256)
            .store_uint(2, 256)
            .store_uint(1, 32)
            .store_uint(4, 32)
            .end_cell();

    return [function_selector, stack, data, get_c7(), null()];
}

_ test_getPublicKey(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(1) {
    throw_if(103, exit_code != 0);

    int result = first(stack);
    throw_if(104, result != 123);
}

;; ---------------------------------------------------------------------------------------------------------------------

[int, tuple, cell, tuple, int] test_recvExternal_data() method_id(2) {
    int function_selector = -1;

    slice message = begin_cell()
            .store_uint(0xAEEB78FE6091883A1E0FDAA6B1F696D23F43381F63B7C353F4D54F7581633B59, 256) ;; sign
            .store_uint(0x38A9E90305BF0F42AD255881F1450C2A4F4553555D870304FBE7EBC5651AFF08, 256) ;; sign
            .store_uint(1, 32) ;; seqno
            .store_uint(0x75CE9159, 32) ;; valid time
            .store_uint(0, 1) ;; method
            .store_uint(777, 32) ;; nonce
            .end_cell().begin_parse();

    tuple stack = unsafe_tuple([message]);

    int password = "password".slice_hash();
    int pk = 0x79CB18B90829D9BBC4F8445AC0A45D4E02C10E7161871845BC01AD6D60D14974;
    int maskedPk = pk ^ password;

    cell data = begin_cell()
            .store_uint(0x42EF9ED6774580E17170798F5DDFCD166ABB9BEB56A4A612B8923F1FD06287A6, 256) ;; publicKey
            .store_uint(maskedPk, 256) ;; maskedPrivateKey
            .store_uint(0x42EF9ED6774580E17170798F5DDFCD166ABB9BEB56A4A612B8923F1FD06287A6, 256) ;; ownerPublicKey
            .store_uint(1, 32) ;; seqno
            .store_uint(0, 32) ;;nonce
            .end_cell();

    return [function_selector, stack, data, get_c7(), null()];
}

_ test_recvExternal(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(3) {
    throw_if(103, exit_code != 0);

    slice storage = data.begin_parse();
    (int pub, int masked, int owner, int seqno, int nonce) = (storage~load_uint(256), ;; publicKey
            storage~load_uint(256), ;; maskedPrivateKey
            storage~load_uint(256), ;; ownerPublicKey
            storage~load_uint(32), ;; seqno
            storage~load_uint(32)); ;;nonce

    throw_if(800, seqno != 2);
    throw_if(900, nonce != 777);
    throw_if(1000, gas > 1000000);
}

;; ---------------------------------------------------------------------------------------------------------------------
