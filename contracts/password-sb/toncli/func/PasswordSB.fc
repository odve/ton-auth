;; Password Soul-bound contract

_ getState() inline_ref {
  slice storage = get_data().begin_parse();
  return (storage~load_uint(256), ;; publicKey
          storage~load_uint(256), ;; maskedPrivateKey
          storage~load_uint(256), ;; ownerPublicKey
          storage~load_uint(32), ;; seqno
          storage~load_uint(32)); ;;nonce
}

() setState(int publicKey, int maskedPrivateKey, int ownerPublicKey, int seqno, int nonce) impure inline {
  set_data(begin_cell()
          .store_uint(publicKey, 256)
          .store_uint(maskedPrivateKey, 256)
          .store_uint(ownerPublicKey, 256)
          .store_uint(seqno, 32)
          .store_uint(nonce, 32)
          .end_cell());
}

slice verifyRequest(slice msg, int seqno, int ownerPublicKey) {
  slice signature = msg~load_bits(512);
  slice request = msg;

  int messageSeqno = request~load_uint(32);
  int validUntill = request~load_uint(32);

  throw_if(33, messageSeqno != seqno);
  throw_if(34, validUntill <= now());
  throw_unless(35, check_signature(slice_hash(msg), signature, ownerPublicKey));

  return request;
}

() recv_internal(slice msg) impure {
  ;; do nothing for internal messages
}

() recv_external(slice msg) impure {
  (int publicKey, int maskedPrivateKey, int ownerPublicKey, int seqno, int nonce) = getState();

  slice request = verifyRequest(msg, seqno, ownerPublicKey);
  accept_message();

  int isChangePasswordOperation = request~load_uint(1);

  if (isChangePasswordOperation) {
    int publicKey = request~load_uint(256);
    int maskedPrivateKey = request~load_uint(256);
  } else {
    nonce = request~load_uint(32);
  }

  request.end_parse();
  setState(publicKey, maskedPrivateKey, ownerPublicKey, seqno + 1, nonce);
}

int getPublicKey() method_id {
  (int publicKey, _, _, _, _) = getState();
  return publicKey;
}

int getMaskedPrivateKey() method_id {
  (_, int maskedPrivateKey, _, _, _) = getState();
  return maskedPrivateKey;
}

int seqno() method_id {
  (_, _, _, int seqno, _) = getState();
  return seqno;
}

int get2FactorNonce() method_id {
  (_, _, _, _, int nonce) = getState();
  return nonce;
}
