@startuml
'https://plantuml.com/sequence-diagram

title User auth with login and password

autonumber

actor User
participant App as "Authorization service"
participant Auth as "Authentication center"
collections AC as "Authority SB"
collections Pwd as "Password SB"

==App Auth Initialization==

Auth -> AC : create NFT with Public key
Auth -> App : address
App -> AC : get Public key

==User Password Generation==

User -> User : generate key pair\n\
(<b>Pub</b>, <b>Priv</b>)

User -> User : evaluate <b>Secret</b> as\n\
H(<b>Password</b>) xor <b>Priv</b>

==User Soul-bound Smart Contract==

User -> User : create <b>Address</b> \n\
link to DNS as <b>DN</b>

User -> Auth : request signature for <b>Address</b>

Auth -> User : sign(<b>Address</b>) as <b>Sign</b>

User -> Pwd : create SC: \n\
<b>Pub</b>, <b>Secret</b>, <b>Sign</b>, Authority Center Address

==Registration Page==

User -> App : registraton page \n\
send <b>DN</b>

App -> Pwd : get SC data: \n\
<b>Pub</b>, <b>Secret</b>, <b>Sign</b>, Authority Center Address
App -> App : validate known AC \n\
validate AC <b>Sign</b>
App -> App : store <b>DN</b>, <b>nonce</b>
App -> User : <b>Secret</b>, <b>nonce</b>

User -> User : <b>Secret</b> xor H(password) \n\
is <b>Priv</b>
User -> App : <b>nonce</b>, sign(<b>nonce</b>)

App -> App : validate sign(<b>nonce</b>)
App -> App : store <b>Address</b>, <b>UserId</b>, \n\
last user version
App -> User : User (id, version) \n\
sign(User)

User -> User : encrypt (User, sign)
User -> Pwd : save encrypted(User, sign) in SC

==Using JWT==

User -> App : login by <b>DN</b>

App -> App : get <b>Address</b>, <b>UserId</b>
App -> Pwd : get SC data: <b>Secret</b>, encrypted(User, sign)

App -> User : <b>Secret</b>, \n\
encrypted(User, sign)
User -> User : <b>Secret</b> xor H(password) \n\
is <b>Priv</b>\n\
decrypt User, sing(User) \n\
in JWT like structure

==Login Page with expired JWT==

User -> App : login by <b>DN</b>

App -> App : get <b>Address</b>, <b>UserId</b>
App -> Pwd : get SC data: <b>Secret</b>
App -> App : store <b>UserId</b>, \n\
<b>nonce</b>, <b>Pub</b>

App -> User : <b>Secret</b>, <b>nonce</b>
User -> User : <b>Secret</b> xor H(password) \n\
is <b>Priv</b>
User -> App : <b>nonce</b>, sign(<b>nonce</b>)

App -> App : validate sign(<b>nonce</b>)

App -> Pwd : get SC data: encrypted(User, sign)

App -> User : encrypted(User, sign)

User -> User : decrypt User, sing(User) \n\
in JWT like structure

====

@enduml